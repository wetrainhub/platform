@using Volo.Abp.UI.Navigation
@using WTH.Theme.Wetrainhub.Layout
@using WTH.Theme.Wetrainhub.Themes.Wetrainhub.Components.Brand
@model Volo.Abp.UI.Navigation.ApplicationMenu
@inject IThemePageLayout PageLayout
<div id="kt_header" class="header">

    <!--Header top-->
    <div class="header-top d-flex align-items-stretch flex-grow-1">
        <div class="d-flex container-xxl align-items-stretch">

            <div class="d-flex align-items-center align-items-lg-stretch me-5 flex-row-fluid">
                <button class="d-lg-none btn btn-icon btn-color-white bg-hover-white bg-hover-opacity-10 w-35px h-35px h-md-40px w-md-40px ms-n3 me-2" id="kt_header_navs_toggle">
                    <i class="fal fa-menu fs-2"></i>
                </button>

                @(await Component.InvokeAsync<BrandViewComponent>())

                <div class="align-self-end overflow-auto" id="kt_brand_tabs">
                    <div class="header-tabs overflow-auto mx-4 ms-lg-10 mb-5 mb-lg-0"
                         id="kt_header_tabs"
                         data-kt-swapper="true"
                         data-kt-swapper-mode="prepend"
                         data-kt-swapper-parent="{default: '#kt_header_navs_wrapper', lg: '#kt_brand_tabs'}">
                        <ul class="nav flex-nowrap text-nowrap">
                            @foreach (var tabMenuItem in Model.Items)
                            {
                                var activeCssClass = tabMenuItem.Name == PageLayout.Content.MenuTabName ? "active" : "";
                                <li class="nav-item">
                                    <a class="nav-link @activeCssClass" data-bs-toggle="tab" href="#@tabMenuItem.Name">@tabMenuItem.DisplayName</a>
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="header-navs d-flex align-items-stretch flex-stack h-lg-70px w-100 py-5 py-lg-0 overflow-hidden overflow-lg-visible" id="kt_header_navs" data-kt-drawer="true" data-kt-drawer-name="header-menu" data-kt-drawer-activate="{default: true, lg: false}" data-kt-drawer-overlay="true" data-kt-drawer-width="{default:'200px', '300px': '250px'}" data-kt-drawer-direction="start" data-kt-drawer-toggle="#kt_header_navs_toggle" data-kt-swapper="true" data-kt-swapper-mode="append" data-kt-swapper-parent="{default: '#kt_body', lg: '#kt_header'}">

        <div class="d-lg-flex container-xxl w-100">
            <div class="d-lg-flex flex-column justify-content-lg-center w-100">
                <div class="tab-content" data-kt-scroll="true" data-kt-scroll-activate="{default: true, lg: false}" data-kt-scroll-height="auto" data-kt-scroll-offset="70px">

                    @foreach (var tabMenuItem in Model.Items)
                    {
                        var activeTabPaneCssClass = tabMenuItem.Name == PageLayout.Content.MenuTabName ? "active show" : "";
                        <div class="tab-pane fade @activeTabPaneCssClass" id="@tabMenuItem.Name">
                            <div class="header-menu flex-column align-items-stretch flex-lg-row">
                                <div class="menu menu-rounded menu-column menu-lg-row menu-root-here-bg-desktop menu-active-bg menu-title-gray-700 menu-state-primary menu-arrow-gray-500 fw-semibold align-items-stretch flex-grow-1 px-2 px-lg-0"
                                     id="#kt_header_menu"
                                     data-kt-menu="true">

                                    @foreach (var menuItem in tabMenuItem.Items)
                                    {
                                        var elementId = string.IsNullOrEmpty(menuItem.ElementId) ? string.Empty : $"id=\"{menuItem.ElementId}\"";
                                        var cssClass = string.IsNullOrEmpty(menuItem.CssClass) ? string.Empty : menuItem.CssClass;
                                        var activeCssClass = menuItem.Name == PageLayout.Content.MenuItemName ? "here" : "";
                                        var disabled = menuItem.IsDisabled ? "disabled" : string.Empty;
                                        var url = string.IsNullOrEmpty(menuItem.Url) ? "#" : Url.IsLocalUrl(menuItem.Url) ? Url.Content(menuItem.Url.EnsureStartsWith('~')) : menuItem.Url;
                                        var customComponentType = menuItem.GetComponentTypeOrDefault();

                                        if (menuItem.IsLeaf)
                                        {
                                            if (customComponentType != null && typeof(ViewComponent).IsAssignableFrom(customComponentType))
                                            {
                                                @(await Component.InvokeAsync(customComponentType))
                                            }
                                            else if (menuItem.Url != null)
                                            {
                                                <a href="@url"
                                                   class="menu-item me-0 me-lg-2 @activeCssClass">

                                                    <span class="menu-link py-3">
                                                        <span class="menu-title">@menuItem.DisplayName</span>
                                                    </span>
                                                </a>
                                            }
                                        }
                                        else
                                        {
                                            <div
                                                data-kt-menu-trigger="{default: 'click', lg: 'hover'}"
                                                data-kt-menu-placement="bottom-start"
                                                class="menu-item menu-lg-down-accordion menu-sub-lg-down-indention me-0 me-lg-2">

                                                @if (customComponentType != null && typeof(ViewComponent).IsAssignableFrom(customComponentType))
                                                {
                                                    @(await Component.InvokeAsync(customComponentType))
                                                }
                                                else
                                                {
                                                    <span class="menu-link py-3" id="Menu_@(menuItem.Name)">
                                                        <span class="menu-title">@menuItem.DisplayName</span>
                                                        <span class="menu-arrow d-lg-none"></span>
                                                    </span>

                                                    <div class="menu-sub menu-sub-lg-down-accordion menu-sub-lg-dropdown px-lg-2 py-lg-4 w-lg-250px">
                                                        @foreach (var childMenuItem in menuItem.Items)
                                                        {
                                                            @await Html.PartialAsync("~/Themes/Wetrainhub/Components/Header/_MenuItem.cshtml", childMenuItem)
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        }
                                    }


                                </div>
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>


    </div>
</div>